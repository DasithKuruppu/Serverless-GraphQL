service: aws-nodejs
plugins:
  - serverless-webpack
  - serverless-offline
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-events
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 1 #more throughput on production env 
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  webpack:
    webpackConfig: './webpack.config.js'   # Name of webpack configuration file
    includeModules: true   # Node modules configuration for packaging
    packager: 'npm'   # Packager that will be used to package your external modules
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}
provider:
  name: aws
  runtime: nodejs8.10
  stage: default
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:dynamodb:*:*:table/"
            - Ref: EventsGqlDynamoDbTable
functions:
  queryEvents:
    handler: handler.queryEvents
    events:
      - http:
          path: events
          method: post
          cors: true
    environment:
      TABLE_NAME: ${self:custom.tableName}
resources:
  # DynamoDB
  - ${file(resources/dynamodb.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  