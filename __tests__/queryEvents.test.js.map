{"version":3,"file":"queryEvents.test.js","sources":["webpack:///webpack/bootstrap","webpack:///external \"graphql\"","webpack:///external \"aws-sdk\"","webpack:///external \"uuid/v4\"","webpack:///./dynamodb/index.js","webpack:///./resolvers/events/create.ts","webpack:///external \"graphql-iso-date\"","webpack:///external \"@elastic/elasticsearch\"","webpack:///external \"serverless-jest-plugin\"","webpack:///./resolvers/events/view.ts","webpack:///./resolvers/events/list.ts","webpack:///./resolvers/events/remove.ts","webpack:///./schemas/index.ts","webpack:///./elasticSearch/elasticSearchConnect.ts","webpack:///./elasticSearch/mappings.ts","webpack:///./streams/utils/index.ts","webpack:///./elasticSearch/config.ts","webpack:///./streams/process.ts","webpack:///./handler.ts","webpack:///./__tests__/queryEvents.test.ts"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","module.exports = require(\"graphql\");","module.exports = require(\"aws-sdk\");","module.exports = require(\"uuid/v4\");","import { DynamoDB } from \"aws-sdk\";\r\n\r\nlet dynamoDbClient = new DynamoDB.DocumentClient();\r\nif (process.env.IS_OFFLINE) {\r\n  dynamoDbClient = new DynamoDB.DocumentClient({\r\n    endpoint: \"http://localhost:8000\",\r\n    region: \"localhost\",\r\n  });\r\n}\r\n\r\nexport { dynamoDbClient };\r\n","import { IEvent } from \"./typings\";\r\nimport { dynamoDbClient } from \"../../dynamodb\";\r\nimport * as uuidv4 from \"uuid/v4\";\r\n\r\nexport function createParams(data: IEvent, TableName: string , uniqueID: string) {\r\n  return {\r\n    Item: {\r\n      name: data.name,\r\n      description: data.description,\r\n      id: uniqueID,\r\n      addedAt: Date.now(),\r\n    },\r\n    TableName,\r\n  };\r\n}\r\n\r\nexport default (data: IEvent) => {\r\n  const putParams = createParams(data, process.env.TABLE_NAME, uuidv4());\r\n  return dynamoDbClient\r\n    .put(putParams)\r\n    .promise()\r\n    .then(() => {\r\n      return putParams.Item;\r\n    }).catch((err) => {\r\n      throw err;\r\n    });\r\n};\r\n","module.exports = require(\"graphql-iso-date\");","module.exports = require(\"@elastic/elasticsearch\");","module.exports = require(\"serverless-jest-plugin\");","import { DynamoDB } from \"aws-sdk\";\r\nconst dynamoDb = new DynamoDB.DocumentClient();\r\n\r\nexport default async (id: string) => {\r\n  const params = {\r\n    TableName: process.env.TABLE_NAME,\r\n    Key: { id },\r\n  };\r\n  const GetEvents = await dynamoDb\r\n    .get(params)\r\n    .promise();\r\n  return GetEvents.Item;\r\n};\r\n","import { DynamoDB } from \"aws-sdk\";\r\nconst dynamoDb = new DynamoDB.DocumentClient();\r\nexport default () =>\r\n  dynamoDb\r\n    .scan({ TableName: process.env.TABLE_NAME })\r\n    .promise()\r\n    .then((list: DynamoDB.DocumentClient.ScanOutput) => list.Items.map(\r\n    (Item) => {\r\n        return ({ ...Item, addedAt: new Date(Item.addedAt) });\r\n      }));\r\n","import { DynamoDB, AWSError } from \"aws-sdk\";\r\nconst dynamoDb = new DynamoDB.DocumentClient();\r\n\r\nexport default  async (id: string) => {\r\n  const params = {\r\n    TableName: process.env.TABLE_NAME,\r\n    Key: { id },\r\n    ReturnValues: \"ALL_OLD\",\r\n  };\r\n  try {\r\n    const response = await dynamoDb.delete(params).promise();\r\n    return response.Attributes;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n","/*import {\r\n  paginationToParams,\r\n  dataToConnection\r\n} from \"graphql-dynamodb-connections\";\r\n*/\r\nimport {\r\n  GraphQLSchema,\r\n  GraphQLObjectType,\r\n  GraphQLString,\r\n  GraphQLList,\r\n  GraphQLNonNull,\r\n  GraphQLBoolean,\r\n} from \"graphql\";\r\n\r\nimport {\r\n  /*GraphQLDate,\r\n  GraphQLTime,*/\r\n  GraphQLDateTime,\r\n} from \"graphql-iso-date\";\r\n\r\nimport { IEvent } from \"../resolvers/events/typings\";\r\nimport addEvent from \"../resolvers/events/create\";\r\nimport viewEvent from \"../resolvers/events/view\";\r\nimport listEvents from \"../resolvers/events/list\";\r\nimport removeEvent from \"../resolvers/events/remove\";\r\n\r\nconst eventType = new GraphQLObjectType({\r\n  name: \"Event\",\r\n  fields: {\r\n    id: { type: new GraphQLNonNull(GraphQLString) },\r\n    name: { type: new GraphQLNonNull(GraphQLString) },\r\n    description: { type: new GraphQLNonNull(GraphQLString) },\r\n    addedAt: { type: new GraphQLNonNull(GraphQLDateTime) },\r\n  },\r\n});\r\n\r\nconst schema = new GraphQLSchema({\r\n  query: new GraphQLObjectType({\r\n    name: \"Query\",\r\n    fields: {\r\n      listEvents: {\r\n        type: new GraphQLList(eventType),\r\n        resolve: (parent ) => {\r\n          return listEvents();\r\n        },\r\n      },\r\n      viewEvent: {\r\n        args: {\r\n          id: { type: new GraphQLNonNull(GraphQLString) },\r\n        },\r\n        type: eventType,\r\n        resolve: (parent, args: { id: string }) => {\r\n          return viewEvent(args.id);\r\n        },\r\n      },\r\n    },\r\n  }),\r\n\r\n  mutation: new GraphQLObjectType({\r\n    name: \"Mutation\",\r\n    fields: {\r\n      createEvent: {\r\n        args: {\r\n          name: { type: new GraphQLNonNull(GraphQLString) },\r\n          description: { type: new GraphQLNonNull(GraphQLString) },\r\n        },\r\n        type: eventType,\r\n        resolve: (parent, args: IEvent) => {\r\n          return addEvent(args);\r\n        },\r\n      },\r\n      removeEvent: {\r\n        args: {\r\n          id: { type: new GraphQLNonNull(GraphQLString) },\r\n        },\r\n        type: eventType,\r\n        resolve: (parent, args: { id: string }) => {\r\n          return removeEvent(args.id);\r\n        },\r\n      },\r\n    },\r\n  }),\r\n});\r\nexport default schema;\r\n","import { Client } from \"@elastic/elasticsearch\";\r\n\r\nexport const esClient = new Client({ node: `https://${process.env.ELASTICSEARCH_URL}` });\r\n","import { RequestParams } from \"@elastic/elasticsearch\";\r\n\r\nexport function getESMappings(index: string): RequestParams.IndicesCreate {\r\n  return {\r\n    index,\r\n    body: {\r\n      properties: {\r\n        id: { type: \"text\" },\r\n        description: { type: \"text\" },\r\n        name: { type: \"text\" },\r\n        addedAt: { type: \"number\" },\r\n      },\r\n    },\r\n  };\r\n}\r\n","\r\nfunction transformData(newImage) {\r\n  const transformedObject = {};\r\n  Object.keys(newImage).forEach((key: string) => {\r\n    const dataType = Object.keys(newImage[key])[0];\r\n    transformedObject[key] = newImage[key][dataType];\r\n  });\r\n  return transformedObject;\r\n}\r\n\r\nexport function extractRecordsFromDynamodbEvent(event) {\r\n  if (!event.Records || !Array.isArray(event.Records) || event.Records.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  return event.Records.reduce((acculator, current) => {\r\n    const ACTION: \"INSERT\" | \"UPDATE\" = current.eventName;\r\n    const existingRecords = acculator[ACTION] || [];\r\n    const existsDynamoDb = current.dynamodb && current.dynamodb.NewImage;\r\n    if (existsDynamoDb) {\r\n      return { ...acculator, [ACTION]: [...existingRecords, transformData(current.dynamodb.NewImage)] };\r\n    }\r\n  }, {});\r\n}\r\n\r\nexport const actions = {\r\n  INSERT: \"INSERT\",\r\n  UPDATE: \"UPDATE\",\r\n};\r\n","export const config = {\r\n  INDEX: \"defaultevents\",\r\n  TYPE: \"bookingevent\",\r\n};\r\n","import { esClient } from \"../elasticSearch/elasticSearchConnect\";\r\nimport { getESMappings } from \"../elasticSearch/mappings\";\r\nimport { extractRecordsFromDynamodbEvent, actions } from \"./utils\";\r\nimport { config } from \"../elasticSearch/config\";\r\n\r\nexport async function indexElasticSearch(event) {\r\n  try {\r\n    // check if indices already exist\r\n    const exists = await esClient.indices.exists({ index: config.INDEX });\r\n    if (!exists) {\r\n      // if not create new index and mappings for it\r\n      await esClient.indices.create(getESMappings(config.INDEX));\r\n    }\r\n    // extract data\r\n\r\n    const dataArray = extractRecordsFromDynamodbEvent(event)[actions.INSERT] || []; // default to empty\r\n\r\n    await Promise.all(\r\n      dataArray.map(async (data) => {\r\n        await esClient.index({\r\n          id: data.id,\r\n          index: config.INDEX,\r\n          body: data,\r\n        });\r\n      }),\r\n    );\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n}\r\n","import schema from \"./schemas/index\";\r\nimport { graphql } from \"graphql\";\r\nimport { APIGatewayProxyEvent } from \"aws-lambda\";\r\nimport { indexElasticSearch } from \"./streams/process\";\r\n// Highly scalable FaaS architecture :)\r\n// Export a function which would be hooked up to the the λ node/ nodes as specified on serverless.yml template\r\nexport async function queryEvents(\r\n  event: APIGatewayProxyEvent,\r\n  // context: Context,\r\n) {\r\n  const parsedRequestBody = event && event.body ? JSON.parse(event.body) : {};\r\n  try {\r\n    const graphQLResult = await graphql(\r\n      schema,\r\n      parsedRequestBody.query,\r\n      null,\r\n      null,\r\n      parsedRequestBody.variables,\r\n      parsedRequestBody.operationName,\r\n    );\r\n\r\n    return { statusCode: 200, body: JSON.stringify(graphQLResult) };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function processStreams(event: APIGatewayProxyEvent) {\r\n  await indexElasticSearch(event);\r\n}\r\n","\r\n// tests for queryEvents\r\n// Generated by serverless-jest-plugin\r\n\r\nimport * as mod from \"../handler\";\r\n\r\nimport * as jestPlugin from \"serverless-jest-plugin\";\r\nconst lambdaWrapper = jestPlugin.lambdaWrapper;\r\nconst wrapped = lambdaWrapper.wrap(mod, { handler: \"queryEvents\" });\r\n\r\ndescribe(\"λ Function - queryEvents\", () => {\r\n  beforeAll((done) => {\r\n//  lambdaWrapper.init(liveFunction); // Run the deployed lambda\r\n\r\n    done();\r\n  });\r\n\r\n  it(\"Invoke / Initiate function test\", () => {\r\n    return wrapped.run({}).then((response) => {\r\n      expect(response).not.toBe(null);\r\n      expect(response).toHaveProperty(\"statusCode\");\r\n      expect(response).toHaveProperty(\"body\");\r\n      expect(response.statusCode).toBe(200);\r\n    });\r\n  });\r\n});\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClFA;;;;;;ACAA;;;;;;ACAA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACTA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAPA;AASA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;;;;;AC1BA;;;;;;ACAA;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AAGA;AACA;;ACZA;AACA;AACA;AAEA;AAAA;AAIA;AAAA;AAAA;AACA;;ACTA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;;;;;AAKA;AAYA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAPA;AAPA;AAFA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAPA;AAXA;AAFA;AAtBA;AA+CA;;;;;ACnFA;AAEA;AAAA;AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AADA;AAFA;AAWA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;;ACzBA;AACA;AACA;AAFA;;ACAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;;AC7BA;AACA;AAEA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AC5BA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A","sourceRoot":""}